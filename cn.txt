#include<stdio.h>
#include<string.h>
#define N strlen(gen_poly)
char data[28];
char check_value[28];
char gen_poly[10];
int data_length,i,j;
void crc();
void XOR(){
    for(j = 1;j < N; j++)
    check_value[j] = (( check_value[j] == gen_poly[j])?'0':'1');
}

void receiver(){
    printf("Enter the received data: ");
    scanf("%s", data);
    printf("\n-----------------------------\n");
    printf("Data received: %s", data);
    crc();
    for(i=0;(i<N-1) && (check_value[i]!='1');i++);
        if(i<N-1)
            printf("\nError detected\n\n");
        else
            printf("\nNo error detected\n\n");
}

void crc(){
    for(i=0;i<N;i++)
        check_value[i]=data[i];
    do{
        if(check_value[0]=='1')
            XOR();
        for(j=0;j<N-1;j++)
            check_value[j]=check_value[j+1];
        check_value[j]=data[i++];
    }while(i<=data_length+N-1);
}

int main()
{
	clrscr();
    printf("\nEnter data to be transmitted: ");
    scanf("%s",data);
    printf("\n Enter the Generating polynomial: ");
    scanf("%s",gen_poly);
    data_length=strlen(data);
    for(i=data_length;i<data_length+N-1;i++)
	data[i]='0';
    printf("\n----------------------------------------");
    printf("\n Data padded with n-1 zeros : %s",data);
    printf("\n----------------------------------------");
    crc();
    printf("\nCRC or Check value is : %s",check_value);
    for(i=data_length;i<data_length+N-1;i++)
	data[i]=check_value[i-data_length];
    printf("\n----------------------------------------");
    printf("\n Final data to be sent : %s",data);
    printf("\n----------------------------------------\n");
    receiver();
    getch();
    return 0;
} 



2.#include<stdio.h>
#include<stdlib.h>
#include<math.h>

void main()
{
	int b[50];
    int maxp=6;
    int a[50],temp[70],temp2[70];
    int t,i,j,k,nd,n,m,nh,sum=0,pos=0;
    clrscr();
    printf("Enter Length of Data String: ");
    scanf("%d",&nd);
    printf("Enter Data String: ");

    for(i=0;i<nd;i++)
    {
	scanf("%d",&a[i]);
    }
    printf("-----------------------------------\n",nd);
    for(i=0,j=0;i<nd;i++)
    {
	for(k=0;k<maxp;k++)
	{
	    t=pow(2,k)-1;
	    if(j==t)
	    {
		temp[j]=0;
		j++;
	    }
	}
	temp[j]=a[i];
	j++;
    }
    nh=j;
    printf("Length of Hamming code: %d bits\n",nh);
    n=nh-nd;
    printf("Number of Parity Bits: %d \n",n);

    //int b[n];
     m=n-1;
    for(k=0;k<n;k++)
    {
	t=pow(2,k)-1;

	for(i=t;i<nh;)
	{
	    for(j=0;j<=t;j++)
	    {
		sum=sum+temp[i];
		i++;
		if(i>=nh)
		    break;
	    }

	    if(i>=nh)
		break;

	    for(j=0;j<=t;j++)
	    {
		i++;
		if(i>=nh)
		    break;
	    }

	    if(i>=nh)
		break;
	}
	temp[t]=sum%2;
	sum=0;
	printf("P%d: %d\n",t+1,temp[t]);
    }


    printf("\nHamming code: Sender side:   ");
    for(i=0;i<nh;i++)
    {
	printf("%d ",temp[i]);
    }


    printf("\nHamming code: Receiver side: ");
    for(i=0;i<nh;i++)
    {
	scanf("%d",&temp2[i]);
    }
    sum=0;
    for(k=0;k<n;k++)
    {
	t=pow(2,k)-1;

	for(i=t;i<nh;)
	{
	    for(j=0;j<=t;j++)
	    {
		sum=sum+temp2[i];
		i++;
		if(i>=nh)
		    break;
	    }

	    if(i>=nh)
		break;

	    for(j=0;j<=t;j++)
	    {
		i++;
		if(i>=nh)
		    break;
	    }

	    if(i>=nh)
		break;
	}
	b[m]=sum%2;
	sum=0;
	printf("P%d: %d\n",t+1,b[m]);
	m--;
    }
    for(m=0;m<n;m++)
    {
	pos=pos+b[n-m-1]*pow(2,m);
    }
    printf("Position of Error: %d\n",pos);
    if(temp2[pos-1]==0)
	temp2[pos-1]=1;
    else
	temp2[pos-1]=0;

    printf("\nHamming code: Receiver side: Error Corrected:  ");
    for(i=0;i<nh;i++)
    {
	printf("%d ",temp2[i]);
    }

    printf("\n-----------------------------------\n",nd);
    getch();
}


3.#include <limits.h>

#include <stdio.h>

#define V 9
typedef	 enum {false,true} bool;

int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index;
    int v;
    for (v = 0; v < V; v++)
	if (!sptSet[v] && dist[v] <= min)
	    min = dist[v], min_index = v;
    return min_index;
}

void printSolution(int dist[]) {
 int i;
    printf("Vertex \t\t Distance from Source\n");

    for (i = 0; i < V; i++)
	printf("%d \t\t\t\t %d\n", i, dist[i]);
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    bool sptSet[V];
    int i,count,v;
    for ( i = 0; i < V; i++)
	dist[i] = INT_MAX, sptSet[i] = false;

    dist[src] = 0;

    for (count = 0; count < V - 1; count++) {
	int u = minDistance(dist, sptSet);
	sptSet[u] = true;

	for (v = 0; v < V; v++)
	    if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
		&& dist[u] + graph[u][v] < dist[v])
		dist[v] = dist[u] + graph[u][v];
    }

    printSolution(dist);
}

int main() {

    int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
			{ 4, 0, 8, 0, 0, 0, 0, 11, 0 },
			{ 0, 8, 0, 7, 0, 4, 0, 0, 2 },
			{ 0, 0, 7, 0, 9, 14, 0, 0, 0 },
			{ 0, 0, 0, 9, 0, 10, 0, 0, 0 },
			{ 0, 0, 4, 14, 10, 0, 2, 0, 0 },
			{ 0, 0, 0, 0, 0, 2, 0, 1, 6 },
			{ 8, 11, 0, 0, 0, 0, 1, 0, 7 },
			{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
	clrscr();
    dijkstra(graph, 0);
    getch();
    return 0;
}


4.#include <stdio.h>
#include <limits.h>

#define V 5  
#define E 8  


void BellmanFord(int graph[E][3], int src) {
    int dis[V],i,j,u,v,weight;

    
    for (i = 0; i < V; i++)
	dis[i] = INT_MAX;


    dis[src] = 0;

   
    for (i = 0; i < V - 1; i++) {
	for (j = 0; j < E; j++) {
	    int u = graph[j][0];
	    int v = graph[j][1];
	    int weight = graph[j][2];
	    if (dis[u] != INT_MAX && dis[u] + weight < dis[v])
		dis[v] = dis[u] + weight;
	}
    }

    
    for ( i = 0; i < E; i++) {
	 u = graph[i][0];
	 v = graph[i][1];
	 weight = graph[i][2];
	if (dis[u] != INT_MAX && dis[u] + weight < dis[v]) {
	    printf("Graph contains negative weight cycle\n");
	    return;
	}
    }


    printf("Vertex Distance from Source\n");
    for (i = 0; i < V; i++)
	printf("%d\t\t%d\n", i, dis[i]);
}


int main() {
    /* Every edge has three values (u, v, w) where
       the edge is from vertex u to v with weight w */
    int graph[E][3] = {
	{ 0, 1, -1 }, { 0, 2, 4 }, { 1, 2, 3 },
	{ 1, 3, 2 }, { 1, 4, 2 }, { 3, 2, 5 },
	{ 3, 1, 1 }, { 4, 3, -3 }
    };

    BellmanFord(graph, 0); /* Run the algorithm from source vertex 0 */

    return 0;
}



5.//client 
#include <stdio.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <unistd.h>

int main()
{
    int soc, n;
    char buffer[1024], fname[50];
    struct sockaddr_in addr;

    
    soc = socket(PF_INET, SOCK_STREAM, 0);

   
    addr.sin_family = AF_INET;
    addr.sin_port = htons(7891);
    addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    
    while(connect(soc, (struct sockaddr *) &addr, sizeof(addr))) ;
    printf("\nClient is connected to Server");
    printf("\nEnter file name: ");
    scanf("%s", fname);
    send(soc, fname, sizeof(fname), 0);

    printf("\nRecieved response\n");
  
    while ((n = recv(soc, buffer, sizeof(buffer), 0)) > 0)
        printf("%s", buffer);

    return 0;
}

//Server 

#include <stdio.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <unistd.h>

int main()
{
    int welcome, new_soc, fd, n;
    char buffer[1024], fname[50];
    struct sockaddr_in addr;

    welcome = socket(PF_INET, SOCK_STREAM, 0);

    addr.sin_family = AF_INET;
    addr.sin_port = htons(7891);
    addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    bind(welcome, (struct sockaddr *) &addr, sizeof(addr));
    printf("\nServer is Online");
 
    listen(welcome, 5);
 
    new_soc = accept(welcome, NULL, NULL);

    recv(new_soc, fname, 50, 0);
    printf("\nRequesting for file: %s\n", fname);

    fd = open(fname, O_RDONLY);

    if (fd < 0)
        send(new_soc, "\nFile not found\n", 15, 0);
    else
        while ((n = read(fd, buffer, sizeof(buffer))) > 0)
            send(new_soc, buffer, n, 0);
    printf("\nRequest sent\n");
    close(fd);

    return 0;
}


6.//reciver 
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<netdb.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
int main()
{
int sock,bytes_received,i=1;
char receive[30];
struct hostent *host;
struct sockaddr_in server_addr;
host=gethostbyname("127.0.0.1");
if((sock=socket(AF_INET,SOCK_STREAM,0))==-1)
{
perror("Socket not created");
exit(1);
}
printf("Socket created");
server_addr.sin_family=AF_INET;
server_addr.sin_port=htons(17000);
server_addr.sin_addr=*((struct in_addr *)host->h_addr);
bzero(&(server_addr.sin_zero),8);
if(connect(sock,(struct sockaddr *)&server_addr,sizeof(struct sockaddr))==-1)
{
perror("Connect");
exit(1);
}
while(1)
{
bytes_received=recv(sock,receive,20,0);
receive[bytes_received]='\0';
if(strcmp(receive,"exit")==0)
{
close(sock);
break;
}
else
{
if(strlen(receive)<10)
{
printf("\nFrame %d data %s received\n",i,receive);
send(0,receive,strlen(receive),0);
}
else
{
send(0,"negative",10,0);
}
i++;
}
}
close(sock);
return(0);
}



//Sender
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<netdb.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
int main()
{
int sock,bytes_received,connected,true=1,i=1,s,f=0,sin_size;
char send_data[1024],data[1024],c,fr[30]=" ";
struct sockaddr_in server_addr,client_addr;
if((sock=socket(AF_INET,SOCK_STREAM,0))==-1)
{
perror("Socket not created");
exit(1);
}
if(setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&true,sizeof(int))==-1)
{
perror("Setsockopt");
exit(1);
}
server_addr.sin_family=AF_INET;
server_addr.sin_port=htons(17000);
server_addr.sin_addr.s_addr=INADDR_ANY;
if(bind(sock,(struct sockaddr *)&server_addr,sizeof(struct sockaddr))==-1)
{
perror("Unable to bind");
exit(1);
}
if(listen(sock,5)==-1)
{
perror("Listen");
exit(1);
}
fflush(stdout);
sin_size=sizeof(struct sockaddr_in);
connected=accept(sock,(struct sockaddr *)&client_addr,&sin_size);
while(strcmp(fr,"exit")!=0)
{
printf("Enter Data Frame %d:(Enter exit for End):",i);
scanf("%s",fr);
send(connected,fr,strlen(fr),0);
recv(sock,data,1024,0);
if(strlen(data)!=0)
printf("I got an acknowledgment : %s\n",data);
fflush(stdout);
i++;
}
close(sock);
return(0);
}



